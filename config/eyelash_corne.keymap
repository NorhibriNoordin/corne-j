#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        esc_tilde: esc_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "ESC_TILDE";
            bindings = <&kp ESC>, <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        slash_equal: slash_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_EQUAL";
            bindings = <&kp BACKSLASH>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        t_f4: t_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "T_F4";
            bindings = <&kp T>, <&kp LA(F4)>;

            #binding-cells = <0>;
            mods = <(MOD_RGUI|MOD_LGUI)>;
        };

        mouse_tog: mouse_tog {
            compatible = "zmk,behavior-tap-dance";
            label = "MOUSE_TOG";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&none>, <&tog 3>;
        };

        caps_num: caps_num {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_NUM";
            bindings = <&mo>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        caps_tog: caps_tog {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_TOG";
            #binding-cells = <0>;
            bindings = <&caps_num 1 0>, <&kp CAPSLOCK>, <&tog 2>;
        };

        kp_menu: kp_menu {
            compatible = "zmk,behavior-tap-dance";
            label = "KP_MENU";
            #binding-cells = <0>;
            bindings = <&mt LGUI C_MENU>, <&kp K_MENU>;
        };

        new_behavior: new_behavior {
            compatible = "zmk,behavior-mod-morph";
            label = "NEW_BEHAVIOR";
            bindings = <&slash_equal>, <&kp PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        slash_alt: slash_alt {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH_ALT";
            bindings = <&slash_equal>, <&kp PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <28 29>;
            layers = <0 1 3 5>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <28 31>;
            layers = <0 1 3 5>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <28 32>;
            layers = <0 1 3 5>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <28 30>;
            layers = <0 1 3 5>;
        };

        select-all {
            bindings = <&kp LC(A)>;
            key-positions = <28 14>;
            layers = <0 1 3 5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";

            // --------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |                ↑    |  Y  |  U   |  I  |  O  |  P  | BKSP |      &kp UP_ARROW 
            // | SHIFT |  A  |  S  |  D  |  F  |  G  |               ↓    |  H  |  J   |  K  |  L  |  ;  |  '   | 
            // | CTRL |  Z  |  X  |  C  |  V  |  B  |                ←    |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |                →    | ENT | RSE  | ALT |
            //                                                      enter

            bindings = <
&esc_tilde      &kp Q  &kp W           &kp E        &kp R             &t_f4                                            &kp UP_ARROW                      &kp Y        &kp U             &kp I            &kp O                &kp P          &slash_alt
&kp TAB         &kp A  &kp S           &kp D        &kp F             &kp G                            &kp DOWN_ARROW  &rgb_ug RGB_TOG  &kp RIGHT_ARROW  &kp H        &kp J             &kp K            &kp L                &kp SEMICOLON  &mouse_tog
&kp UNDERSCORE  &kp Z  &mt LEFT_ALT X  &mt LCTRL C  &mt LEFT_SHIFT V  &kp B        &kp K_PLAY_PAUSE                    &kp DOWN_ARROW                    &kp N        &mt LEFT_SHIFT M  &mt RCTRL COMMA  &mt LEFT_ALT PERIOD  &kp SLASH      &kp MINUS
                                       &kp_menu     &caps_tog         &lt 2 SPACE                                                                        &lt 2 ENTER  &kp BACKSPACE     &lt 4 DELETE
            >;

            label = "QWERTY";
            sensor-bindings = <&scroll_encoder>;
        };

        lower_layer {
            display-name = "LOWER";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp N1           &kp N2       &kp N3    &kp N4      &kp N5                                     &mmv MOVE_UP                     &kp N6      &kp N7    &kp N8    &kp N9                &kp N0    &kp EQUAL
&kp HOME   &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp CARET   &kp AMPS  &kp STAR  &kp LEFT_PARENTHESIS  &kp RPAR  &kp PAGE_UP
&trans     &trans           &trans       &trans    &kp LBRC    &kp LBKT     &kp K_MUTE                    &mmv MOVE_DOWN                   &kp RBKT    &kp RBRC  &trans    &trans                &trans    &kp PAGE_DOWN
                                         &trans    &trans      &trans                                                                      &kp INSERT  &trans    &trans
            >;

            label = "NUMBER";
            sensor-bindings = <&inc_dec_kp LC(R) LC(Z)>;
        };

        FN {
            display-name = "Fn";
            bindings = <
&to 0          &kp F1  &kp F2  &kp F3  &kp F4              &kp F5                                  &kp UP                           &kp LPAR      &kp KP_NUMBER_7        &kp KP_NUMBER_8  &kp KP_NUMBER_9      &kp RPAR   &kp EQUAL
&kp PAGE_UP    &kp F6  &kp F7  &kp F8  &kp F9              &kp F10                 &kp LEFT_ARROW  &trans          &kp RIGHT_ARROW  &kp PLUS      &kp KP_N4              &kp KP_N5        &kp KP_N6            &kp MINUS  &kp COMMA
&kp PAGE_DOWN  &trans  &trans  &trans  &mt LEFT_SHIFT F11  &kp F12       &trans                    &kp DOWN_ARROW                   &kp STAR      &mt RIGHT_SHIFT KP_N1  &mt RCTRL KP_N2  &mt RIGHT_ALT KP_N3  &kp SLASH  &kp PERIOD
                               &trans  &kp RIGHT           &kp KP_ENTER                                                             &kp KP_ENTER  &kp DEL                &kp KP_NUMLOCK
            >;

            label = "FN";
            sensor-bindings = <&rgb_encoder>;
        };

        mouse_layer {
            display-name = "MOUSE";

            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans      &trans     &trans      &trans           &mkp MB5                                &mmv MOVE_UP                     &mkp MB5   &trans  &trans  &trans  &trans  &trans
&trans  &trans      &trans     &trans      &trans           &mkp MB4                &mmv MOVE_LEFT  &mkp MB1        &mmv MOVE_RIGHT  &mkp MB4   &trans  &trans  &trans  &trans  &to 0
&trans  &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE      &trans     &mkp RCLK                    &mmv MOVE_DOWN                   &trans     &trans  &trans  &trans  &trans  &kp SCROLLLOCK
                               &kp SPACE   &mmv MOVE_RIGHT  &kp SPACE                                                                &kp ENTER  &trans  &trans
            >;

            label = "MOUSE";
            sensor-bindings = <&scroll_encoder>;
        };

        MISC {
            bindings = <
&to 0         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                            &rgb_ug RGB_EFF              &trans  &trans          &kp UP_ARROW    &trans           &trans  &trans
&out OUT_TOG  &bt BT_CLR    &trans        &trans        &trans        &trans                      &bt BT_NXT  &bt BT_CLR_ALL   &bt BT_PRV  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans        &bt BT_CLR                &rgb_ug RGB_EFR              &trans  &trans          &trans          &trans           &trans  &trans
                                          &trans        &trans        &trans                                                               &trans  &trans          &trans
            >;

            label = "BT";
            sensor-bindings = <&rgb_encoder>;
        };

        colemak_dh {
            bindings = <
&esc_tilde      &kp Q  &kp W  &kp F     &kp P      &kp B                         &trans          &kp J        &kp L          &kp U      &kp Y    &kp SEMI  &slash_equal
&kp TAB         &kp A  &kp R  &kp S     &kp T      &kp G                 &trans  &trans  &trans  &kp M        &kp N          &kp E      &kp I    &kp O     &mouse_tog
&kp UNDERSCORE  &kp Z  &kp X  &kp C     &kp D      &kp V        &to 0            &trans          &kp K        &kp H          &kp COMMA  &kp DOT  &kp FSLH  &kp MINUS
                              &kp_menu  &caps_tog  &lt 2 SPACE                                   &lt 2 ENTER  &kp BACKSPACE  &trans
            >;

            label = "COLEMAK";
            sensor-bindings = <&scroll_encoder>;
        };
    };
};
